plugins {
    id 'java'
    id 'com.github.monosoul.markdown.page.generator' version '2.1.0.1'
}

import org.gradle.util.VersionNumber

class PluginDependency {
    String name
    String version
    String url
    String apiVerAtLeast
    String apiVerBelow

    boolean isCompatible(apiVersion) {
        def apiBase = VersionNumber.parse(apiVersion).getBaseVersion()
        return apiBase.compareTo(VersionNumber.parse(apiVerAtLeast)) >= 0 && apiBase.compareTo(VersionNumber.parse(apiVerBelow)) < 0
    }

    String id() {
        return "${name}-${version}"
    }

    String toString() {
        return "${name} plugin v${version}"
    }
}

class PluginIntegration extends DefaultTask {
    PluginDependency plugin
    File pluginsDir
    File pluginsManifest
    File releaseDir

    @TaskAction
    void integrate() {
        def dst = project.file("${pluginsDir}/${plugin.id()}.zip")
        if (dst.exists()) {
            println("${plugin}: Already available as ${dst}")
        } else {
            project.mkdir dst.parent
            println("${plugin}: Downloading as ${dst}...")
            new URL(plugin.url).withInputStream{ i -> dst.withOutputStream{ it << i }}
        }
        def pluginDir = project.file("${pluginsDir}/${plugin.id()}")
        project.copy {
            from project.zipTree(dst)
            into releaseDir
            include "plugins/**"
        }
        project.copy {
            from project.zipTree(dst)
            into releaseDir
            include "help/**"
        }
        pluginsManifest.append("${plugin}\n")
    }
}

ext.releaseVersion = version.replace('SNAPSHOT', java.time.format.DateTimeFormatter.ofPattern('yyMMddHHmmss').format(LocalDateTime.now()))
ext.releaseDate = java.time.format.DateTimeFormatter.ofPattern('MMMM, yyyy').withLocale(Locale.US).format(LocalDateTime.now())

ext.releaseDir = file("${buildDir}/release/${project.name}-${version}")
ext.releaseAPIDir = file("${buildDir}/release-api/${project.name}-${version}-api")
ext.releaseAPIDocsDir = file("${releaseAPIDir}/docs")

ext.pluginsDir = file("${buildDir}/plugin-downloads")
ext.pluginsManifest = file("${buildDir}/plugins-included.txt")

repositories {
    mavenCentral {
        content { excludeGroup('net.sf.jung') }
    }
    ivy {
        url 'https://master.dl.sourceforge.net/project/jung/jung'
        patternLayout {
            artifact '/[module]-[revision]/[module]-[revision].jar'
        }
        metadataSources { artifact() }
        content { includeGroup('net.sf.jung') }
    }
}

dependencies {
    compile 'commons-codec:commons-codec:1.3'
    compile 'commons-collections:commons-collections:3.2'
    compile ('commons-logging:commons-logging:1.1') { transitive = false }
    compile ('colt:colt:1.2.0') { transitive = false }
    compile 'opensymphony:oscache:2.3'
    // If needed, the JUNG 1.7.4 JAR can be downloaded manually from: 
    // https://sourceforge.net/projects/jung/files/jung/jung-1.7.4/jung-1.7.4.jar
    compile 'net.sf.jung:jung:1.7.4'
}

// List of plugins and version compatibility
ext.idesPlugins = [
    new PluginDependency(
        name: 'Template Design',
        version: '3.0.1',
        url: 'https://github.com/lenkog/IDES-TD/releases/download/v3.0.1/IDES-TD-3.0.1.zip',
        apiVerAtLeast: '3.0',
        apiVerBelow: '3.2',
    )
]

java {
    sourceCompatibility = org.gradle.api.JavaVersion.VERSION_1_8
    targetCompatibility = org.gradle.api.JavaVersion.VERSION_1_8
}

jar {
    manifest {
        attributes 'Main-Class': 'main.Main'
        attributes 'Class-Path': configurations.runtimeClasspath.files.collect { 'lib/' + it.name }.join(' ')
    }
}

task generateAPIJar(type: Jar) {
    from sourceSets.main.output
    include 'ides/api/**'
    classifier = 'api'
    destinationDir = releaseAPIDir
}

task generateAPIJavadoc(type: Javadoc) {
    source = sourceSets.main.allJava.matching { include 'ides/api/**' }
    options.addFileOption('sourcepath', file('src/main/java'))
    classpath = configurations.compileClasspath
    destinationDir = file("${releaseAPIDocsDir}/api")
    title = "${project.name} ${releaseVersion} API"
}

task generateAPIDocs(type: com.github.monosoul.markdown.page.generator.gradle.plugin.GenerateHtmlTask) {
    inputDirectory = file('docs/api')
    outputDirectory = releaseAPIDocsDir
    pegdownExtensions = 'FENCED_CODE_BLOCKS'

    doFirst {
        copy {
            from inputDirectory
            into outputDirectory
            include '*.png'
        }
    }
}

task zipAPI(type: Zip, dependsOn: [generateAPIJar, generateAPIDocs, generateAPIJavadoc]) {
    from file("${buildDir}/release-api")
    destinationDir buildDir
    classifier 'api'

    doFirst {
        copy {
            from projectDir
            into releaseAPIDir
            include('LICENSE.txt', 'ABOUT.txt', 'agpl-3.0.txt')
        }
    }
}

processResources {
    filesMatching('**/*.properties') {
        filter(org.apache.tools.ant.filters.ReplaceTokens,
                tokens: [version: releaseVersion, releaseDate: releaseDate])
    }
}

jar.doLast {
    copy {
        from jar
        into releaseDir
    }
}

task generateTutorial(type: com.github.monosoul.markdown.page.generator.gradle.plugin.GenerateHtmlTask) {
    inputDirectory = file('docs/help/IDES Tutorial')
    outputDirectory = file("${releaseDir}/help/IDES Tutorial")
    pegdownExtensions = 'FENCED_CODE_BLOCKS'

    doFirst {
        copy {
            from inputDirectory
            into outputDirectory
            include '*.png'
        }
    }
}

task generateLatexDoc(type: com.github.monosoul.markdown.page.generator.gradle.plugin.GenerateHtmlTask) {
    inputDirectory = file('docs/help/LaTeX Rendering')
    outputDirectory = file("${releaseDir}/help/LaTeX Rendering")
    pegdownExtensions = 'FENCED_CODE_BLOCKS'

    doFirst {
        copy {
            from inputDirectory
            into outputDirectory
            include('*.png', '*.jpg')
        }
    }
}

task generateHelp(dependsOn: [generateTutorial, generateLatexDoc]){}

task removePluginsManifest() {
    doLast{
        delete pluginsManifest
    }
}

task integratePlugins(dependsOn: removePluginsManifest) {
    doLast {
        if(pluginsManifest.exists()) {
            println 'Plugins included:'
            println '======================='
            println pluginsManifest.text
        }
        def incompatiblePlugins = idesPlugins.findAll { !it.isCompatible(version) }
        if(incompatiblePlugins.size() > 0) {
            println 'WARNING'
            println 'Plugins not compatible:'
            println '======================='
            incompatiblePlugins.each { println it }
        }
    }
}

// Register build tasks for each compatible plugin
idesPlugins.each { idesPlugin ->
    if(idesPlugin.isCompatible(version)) {
        def integrationTask = tasks.register("integrate${idesPlugin.name}", PluginIntegration) {
            plugin = idesPlugin
            pluginsDir = project.pluginsDir
            pluginsManifest = project.pluginsManifest
            releaseDir = project.releaseDir
        }
        integrationTask.configure({ dependsOn(removePluginsManifest) })
        integratePlugins.dependsOn(integrationTask)
    }
}

task zipRelease(type: Zip, dependsOn: [jar, generateHelp, integratePlugins]) {
    from file("${buildDir}/release")
    destinationDir buildDir

    doFirst {
        copy {
            from configurations.runtimeClasspath.files
            into "${releaseDir}/lib"
        }
        copy {
            from projectDir
            into releaseDir
            include('LICENSE.txt', 'NOTICE.txt', 'agpl-3.0.txt', 'CHANGELOG.txt', 'settings.ini')
        }
        mkdir "${releaseDir}/plugins"
        copy {
            from file('plugins')
            into "${releaseDir}/plugins"
        }
        copy {
            from file('examples')
            into "${releaseDir}/examples"
        }
    }
}

assemble.dependsOn([zipAPI, zipRelease])
